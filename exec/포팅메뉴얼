## DB 생성하기

- MySQL 도커 컨테이너 이용해 (User, Theme, Feed)로 3개 실행
- *docker run -p 9010:3306 --name User -e MYSQL_ROOT_PASSWORD=themef1b4! -d mysql*
- *docker run -p 9020:3306 --name Theme -e MYSQL_ROOT_PASSWORD=themef1b4! -d mysql*
- *docker run -p 9030:3306 --name Feed -e MYSQL_ROOT_PASSWORD=themef1b4! -d mysql*

hostname : [k7c203.p.ssafy.io](http://k7c203.p.ssafy.io/) 

port : 9010, 9020, 9030

username : root

password : themef1b4!

User : User, Follow

Theme : Theme, User_Theme, Scrap

Feed : Board, Picture, Comment, Like, Alert

## 도커 & DB설치

## apt를 이용하여 docker를 설치 할 예정이라 apt를 update합니다.
$ sudo apt update

## docker 설치에 필요한 패키지 들을 설치합니다.
$ sudo apt install apt-transport-https ca-certificates curl software-properties-common

## curl를 이용하여, 도커를 설치하기 위한 gp 내용을 다운받고, apt 기능을 위한 리스트에 추가합니다.
$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

## ubuntu 버전에 맞는 docker를 다운로드 할 수 있도록 repository 리스트에 추가합니다.
$ sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"

## apt update를 실행
$ sudo apt update

## docker-ce를 설치합니다
$ apt-cache policy docker-ce
$ sudo apt install docker-ce

## docker가 설치되면, 자동으로 시스템 서비스로서 등록이 됩니다.
## systemctl 명령어를 통해 docker 서비스 상태를 확인해보면, 도커엔진이 구동중인걸 확인할 수 있습니다.
$ sudo systemctl status docker

# 프론트 배포

Created: 2022년 10월 31일 오전 10:06

## 젠킨스 & 도커 설치

```powershell
## apt를 이용하여 docker를 설치 할 예정이라 apt를 update합니다.
$ sudo apt update

## docker 설치에 필요한 패키지 들을 설치합니다.
$ sudo curl [https://get.docker.com/](https://get.docker.com/) > dockerinstall && chmod 777 dockerinstall && ./dockerinstall

## 도커 컨테이너 생성 젠킨스
sudo docker run -d -p 9090:8080 -v /var/jenkins:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock --name jenkins -u root jenkins/jenkins:lts-jdk11

## 젠킨스 컨테이너 접속
sudo docker exec -it jenkins bash

## 젠킨스 내부에 도커 설치
curl [https://get.docker.com/](https://get.docker.com/) > dockerinstall && chmod 777 dockerinstall && ./dockerinstall
```

## 도커파일

```jsx
FROM node as build-stage

WORKDIR /app

COPY package*.json ./

RUN npm install

COPY . .

RUN npm run build

# production stage
FROM nginx:stable-alpine as production-stage
COPY  ./default /etc/nginx//sites-available/default.conf

COPY --from=build-stage /app/dist /usr/share/nginx/html
EXPOSE 8080
CMD ["nginx", "-g", "daemon off;"]
```

## 젠킨스 파일

```jsx
pipeline {
    agent any
    stages {
        stage("build"){
            steps{
                 script{
                     try {
                         sh 'docker stop frontend'
                         sh 'docker rm frontend'
                         sh 'docker rmi front-unit'
                         
                     } catch (e) {
                         sh 'echo "fail remove test-images"'
                     }
                 }
                 sh 'cp /etc/nginx/sites-available/default ./Front/theme'
                 sh 'docker build -t front-unit -f Front/DockFile.e2e ./Front/theme'
                 sh 'docker run -d -p 8080:80 --name frontend front-unit'
             }
             post {
                 success{
                     sh 'echo unit 테스트 성공'
                 }
                 failure{
                     sh 'echo unit 테스트 실패'
                 }
             }
        }
    }    
}
```

## Nginx

```jsx
// Nginx 위치 경로 : /var/jenkins_home/workspace/front/Front/theme/default

sudo docker exit -it jenkins bash
// jenkins 도커 내부
nano /var/jenkins_home/workspace/front/Front/theme/default

server {
        listen 80 default_server;
        listen [::]:80 default_server;
        

        root /var/www/html;

        index index.html index.htm index.nginx-debian.html;

        server_name _;

        location / {
                alias /usr/share/nginx/html/;
                try_files $uri $uri/ /index.html;

        }

}

server {
  listen 80; 
  server_name k7c2031.p.ssafy.io; 
  return 301 https://k7c2031.p.ssafy.io$request_uri; 

}
server {
  listen 443 ssl http2; 
  server_name k7c2031.p.ssafy.io;
	client_max_body_size 5M;
  # ssl 인증서 적용하기
  ssl_certificate /etc/letsencrypt/live/k7c2031.p.ssafy.io/fullchain.pem
  ssl_certificate_key /etc/letsencrypt/live/k7c2031.p.ssafy.io/privkey.pem
  
  location / { 
    proxy_pass http://k7c2031.p.ssafy.io:8080; 
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }
}
server {
    if ($host = k7c2031.p.ssafy.io) { 
        return 301 https://$host$request_uri; 
    } 
    

  listen 80;
  server_name example.com;
    return 404; 

}

```

## SSL

```jsx
// 도커 내부
apt-get update
apt-get install software-properties-common
add-apt-repository universe
add-apt-repository ppa:certbot/certbot
apt-get install python3-certbot-nginx
certbot certonly --nginx -d k7c2031.p.ssafy.io
apt-get update

/etc/letsencrypt/live/k7c2031.p.ssafy.io/fullchain.pem

/etc/letsencrypt/live/k7c2031.p.ssafy.io/privkey.pem
```

```jsx
server {
  listen 80; 

  location / {
    root /usr/share/nginx/html;

    index index.html index.htm;

    try_files $uri $uri/ /index.html;  

    gzip_static always; 
  }
}

server {
  listen 8080; 

  location / {
    root /usr/share/nginx/html;

    index index.html index.htm;

    try_files $uri $uri/ /index.html;  

    gzip_static always; 
  }
}

server {
  listen 443; 

  location / {
    root /usr/share/nginx/html;

    index index.html index.htm;

    try_files $uri $uri/ /index.html;  

    gzip_static always; 
  }
}
```

## 프론트 젠킨스 셋팅

젠킨스 주소 : http://k7c2031.p.ssafy.io:9090/
젠킨스 시크릿키 : 309a0cfc1cf0411a8f2291e26ba21a24
계정명 : c203
암호 : themeb1f4!
이름 : front
이메일 주소 : 1552419@gmail.com

젠킨스 훅 주소 : http://k7c2031.p.ssafy.io:9090/project/front
젠킨스 빌드 트리거 시크릿 키 : 412bf9ec25bd28f1503c95fbd93ef75c

## 백엔드 배포

## 젠킨스 비밀번호

- bce14078b7f2412190ce48ad0a9ffc95

## Gitlab API Token

- Lx1dFoww7yDcyDQtExC3

## DB 인덱스

# 조회
show index from Board;

#생성
CREATE INDEX city_idx ON Board(city);

## Grafana 셋팅

#apt update
sudo apt-get update && sudo apt-get upgrade -y
sudo apt-get install -y apt-transport-https
sudo apt-get install -y software-properties-common wget

#grafana key
wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -

#main 
echo "deb https://packages.grafana.com/oss/deb stable main" | sudo tee -a /etc/apt/sources.list.d/grafana.list

#download grafana
sudo apt-get update
sudo apt-get install grafana

#start
sudo service grafana-server start

주소 : [http://k7c203.p.ssafy.io:3000/login](http://k7c203.p.ssafy.io:3000/login)

계정 : admin

비밀번호 : themef1b4!

## 프로메테우스

설치경로

/home/ubuntu/prometheus-2.0.0.linux-amd64/prometheus.yml
재기동
sudo systemctl daemon-reload
sudo systemctl stop prometheus
sudo systemctl start prometheus
sudo systemctl enadble prometheus

상태확인
sudo systemctl status prometheus

환경 설정 파일
sudo nano /etc/systemd/system/prometheus.service

설정 파일
sudo nano /home/ubuntu/prometheus-2.0.0.linux-amd64/prometheus.yml

환경 설정 파일

[Unit]
Description=Prometheus Server
Documentation=https://prometheus.io/docs/introduction/overview/
After=network-online.target

[Service]
User=root
Restart=on-failure

#Change this line if you download ther
#Prometheus on different path user
ExecStart=/usr/local/bin/prometheus \
  --config.file=/home/ubuntu/prometheus-2.0.0.linux-amd64/prometheus.yml \
  --storage.tsdb.path=/data/prometheus \
  --web.console.templates=/etc/prometheus/consoles \
  --web.console.libraries=/etc/prometheus/console_libraries \
  --web.listen-address=0.0.0.0:3001 \ #9090 젠킨스 포트와 겹쳐서 포트번호 변경
  --web.enable-admin-api
[Install]
WantedBy=multi-user.target

설정파일

scrape_configs:
  - job_name : 'spring-gateway'
  metrics_path : '/actuator/prometheus'
  scrape_interval: 5s
  scheme : 'https'
  static_configs:
    - targets: ['k7c203.p.ssafy.io:8000'] #gateway 포트


## 그라파나

프로메테우스 연동 - 설정 - 프로메테우스 클릭 후 정보 입력

연동 이후 - import - id : 12900 - 프로메테우스 선택

# ngrinder

Created: 2022년 11월 19일 오후 1:25

## 과부하 테스트 툴 - 도커 컨테이너로 만들기

- 컨트롤러 : 3002 포트

```jsx
sudo docker pull ngrinder/controller

docker run -d -v ~/ngrinder-controller:/opt/ngrinder-controller --name controller -p 3002:80 -p 16001:16001 -p 12000-12009:12000-12009 ngrinder/controller
```

- 에이전트 :

```jsx
sudo docker pull ngrinder/agent

sudo docker run -v ~/ngrinder-agent:/opt/ngrinder-agent -d --name agent ngrinder/agent 3.34.138.123:3002
```

3.34.138.123 = [k7c203.p.ssafy.io](http://k7c203.p.ssafy.io) 실제 아이피

- 에이전트 확인

![Untitled](ngrinder%201e7ec279435849998b8477635476480a/Untitled.png)

- 상단 - 스크립트 - 만들기

![Untitled](ngrinder%201e7ec279435849998b8477635476480a/Untitled%201.png)

- 상단 - 성능 테스트 - 성능 태스트 생성
    
    ![Untitled](ngrinder%201e7ec279435849998b8477635476480a/Untitled%202.png)
    
- 결과 - 로드밸런싱 미적용, 인덱스 적용
    
    ![Untitled](ngrinder%201e7ec279435849998b8477635476480a/Untitled%203.png)
    
- 결과 - 1000명의 사용자 각 10번씩 = 1만번의 호출 : 4분 31초 ⇒ 이후에 과부하 테스트 안됨..
    
    ![Untitled](ngrinder%201e7ec279435849998b8477635476480a/Untitled%204.png)
    
- 결과 - 로드밸런싱 적용 : 안정정인 처리속도
    
    ![Untitled](ngrinder%201e7ec279435849998b8477635476480a/Untitled%205.png)
    
- 과부하 테스트 - 서버 렉 걸렸을때 그라파나 사용률
    
    ![Untitled](ngrinder%201e7ec279435849998b8477635476480a/Untitled%206.png)

# 로드밸런싱

Created: 2022년 11월 19일 오후 2:47

```sql
sudo docker run -it -d --rm -p 8032:8030 --network Theme -e "eureka.client.serviceUrl.defaultZone=http://eureka:8761/eureka" --name feed2 feed
```

![Untitled](%E1%84%85%E1%85%A9%E1%84%83%E1%85%B3%E1%84%87%E1%85%A2%E1%86%AF%E1%84%85%E1%85%A5%E1%86%AB%E1%84%89%E1%85%B5%E1%86%BC%209c593ae8ebdb428eb473380b73a69817/Untitled.png)

## 검색엔진 적용 (네이버)
# 검색엔진 적용 ( 네이버 )

Created: 2022년 11월 17일 오전 10:33

## 메타 태그 설정

![Untitled](%E1%84%80%E1%85%A5%E1%86%B7%E1%84%89%E1%85%A2%E1%86%A8%E1%84%8B%E1%85%A6%E1%86%AB%E1%84%8C%E1%85%B5%E1%86%AB%20%E1%84%8C%E1%85%A5%E1%86%A8%E1%84%8B%E1%85%AD%E1%86%BC%20(%20%E1%84%82%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%87%E1%85%A5%20)%207c927ba3ac6846559c5c8e144048a6cd/Untitled.png)

## Robot.txt 등록

![Untitled](%E1%84%80%E1%85%A5%E1%86%B7%E1%84%89%E1%85%A2%E1%86%A8%E1%84%8B%E1%85%A6%E1%86%AB%E1%84%8C%E1%85%B5%E1%86%AB%20%E1%84%8C%E1%85%A5%E1%86%A8%E1%84%8B%E1%85%AD%E1%86%BC%20(%20%E1%84%82%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%87%E1%85%A5%20)%207c927ba3ac6846559c5c8e144048a6cd/Untitled%201.png)

## 네이버 웹 페이지 수집 요청

![Untitled](%E1%84%80%E1%85%A5%E1%86%B7%E1%84%89%E1%85%A2%E1%86%A8%E1%84%8B%E1%85%A6%E1%86%AB%E1%84%8C%E1%85%B5%E1%86%AB%20%E1%84%8C%E1%85%A5%E1%86%A8%E1%84%8B%E1%85%AD%E1%86%BC%20(%20%E1%84%82%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%87%E1%85%A5%20)%207c927ba3ac6846559c5c8e144048a6cd/Untitled%202.png)
